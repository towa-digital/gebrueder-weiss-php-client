<?php
/**
 * Address
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Towa\GebruederWeissSDK\Model;

use \ArrayAccess;
use \Towa\GebruederWeissSDK\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description address
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'name4' => 'string',
        'street1' => 'string',
        'street2' => 'string',
        'street3' => 'string',
        'postbox' => 'string',
        'city' => 'string',
        'zip_code' => 'string',
        'country_code' => 'string',
        'state' => 'string',
        'location' => 'Location'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'name4' => null,
        'street1' => null,
        'street2' => null,
        'street3' => null,
        'postbox' => null,
        'city' => null,
        'zip_code' => null,
        'country_code' => 'iso-3166',
        'state' => null,
        'location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'name4' => 'name4',
        'street1' => 'street1',
        'street2' => 'street2',
        'street3' => 'street3',
        'postbox' => 'postbox',
        'city' => 'city',
        'zip_code' => 'zipCode',
        'country_code' => 'countryCode',
        'state' => 'state',
        'location' => 'location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'name4' => 'setName4',
        'street1' => 'setStreet1',
        'street2' => 'setStreet2',
        'street3' => 'setStreet3',
        'postbox' => 'setPostbox',
        'city' => 'setCity',
        'zip_code' => 'setZipCode',
        'country_code' => 'setCountryCode',
        'state' => 'setState',
        'location' => 'setLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'name4' => 'getName4',
        'street1' => 'getStreet1',
        'street2' => 'getStreet2',
        'street3' => 'getStreet3',
        'postbox' => 'getPostbox',
        'city' => 'getCity',
        'zip_code' => 'getZipCode',
        'country_code' => 'getCountryCode',
        'state' => 'getState',
        'location' => 'getLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name1'] = $data['name1'] ?? null;
        $this->container['name2'] = $data['name2'] ?? null;
        $this->container['name3'] = $data['name3'] ?? null;
        $this->container['name4'] = $data['name4'] ?? null;
        $this->container['street1'] = $data['street1'] ?? null;
        $this->container['street2'] = $data['street2'] ?? null;
        $this->container['street3'] = $data['street3'] ?? null;
        $this->container['postbox'] = $data['postbox'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name1']) && (mb_strlen($this->container['name1']) > 35)) {
            $invalidProperties[] = "invalid value for 'name1', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name2']) && (mb_strlen($this->container['name2']) > 35)) {
            $invalidProperties[] = "invalid value for 'name2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name3']) && (mb_strlen($this->container['name3']) > 35)) {
            $invalidProperties[] = "invalid value for 'name3', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name4']) && (mb_strlen($this->container['name4']) > 35)) {
            $invalidProperties[] = "invalid value for 'name4', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['street1']) && (mb_strlen($this->container['street1']) > 35)) {
            $invalidProperties[] = "invalid value for 'street1', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) > 35)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['street3']) && (mb_strlen($this->container['street3']) > 35)) {
            $invalidProperties[] = "invalid value for 'street3', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['postbox']) && (mb_strlen($this->container['postbox']) > 9)) {
            $invalidProperties[] = "invalid value for 'postbox', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 35)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 9.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name1
     *
     * @return string|null
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string|null $name1 name 1 of the address
     *
     * @return self
     */
    public function setName1($name1)
    {
        if (!is_null($name1) && (mb_strlen($name1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name1 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 name 2 of the address
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (!is_null($name2) && (mb_strlen($name2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name2 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3()
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 name 3 of the address
     *
     * @return self
     */
    public function setName3($name3)
    {
        if (!is_null($name3) && (mb_strlen($name3) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name3 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets name4
     *
     * @return string|null
     */
    public function getName4()
    {
        return $this->container['name4'];
    }

    /**
     * Sets name4
     *
     * @param string|null $name4 name 4 of the address
     *
     * @return self
     */
    public function setName4($name4)
    {
        if (!is_null($name4) && (mb_strlen($name4) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name4 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['name4'] = $name4;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 street 1 of the address
     *
     * @return self
     */
    public function setStreet1($street1)
    {
        if (!is_null($street1) && (mb_strlen($street1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $street1 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 street 2 of the address
     *
     * @return self
     */
    public function setStreet2($street2)
    {
        if (!is_null($street2) && (mb_strlen($street2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets street3
     *
     * @return string|null
     */
    public function getStreet3()
    {
        return $this->container['street3'];
    }

    /**
     * Sets street3
     *
     * @param string|null $street3 street 3 of the address
     *
     * @return self
     */
    public function setStreet3($street3)
    {
        if (!is_null($street3) && (mb_strlen($street3) > 35)) {
            throw new \InvalidArgumentException('invalid length for $street3 when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['street3'] = $street3;

        return $this;
    }

    /**
     * Gets postbox
     *
     * @return string|null
     */
    public function getPostbox()
    {
        return $this->container['postbox'];
    }

    /**
     * Sets postbox
     *
     * @param string|null $postbox postbox of the address
     *
     * @return self
     */
    public function setPostbox($postbox)
    {
        if (!is_null($postbox) && (mb_strlen($postbox) > 9)) {
            throw new \InvalidArgumentException('invalid length for $postbox when calling Address., must be smaller than or equal to 9.');
        }

        $this->container['postbox'] = $postbox;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city of the address
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 35)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zipcode of the address
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 9)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Address., must be smaller than or equal to 9.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code defines the country folowing IS-3166-1 Alpha2, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state or province or territory of the address
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets location
     *
     * @return Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param Location|null $location location information
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



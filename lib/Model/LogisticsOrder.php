<?php
/**
 * LogisticsOrder
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Towa\GebruederWeissSDK\Model;

use \ArrayAccess;
use \Towa\GebruederWeissSDK\ObjectSerializer;

/**
 * LogisticsOrder Class Doc Comment
 *
 * @category Class
 * @description object for a logistics order
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LogisticsOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LogisticsOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'customer_id' => 'int',
        'customer_order' => 'string',
        'creation_date_time' => '\DateTime',
        'warehouse_id' => 'string',
        'references' => '\Towa\GebruederWeissSDK\Model\Reference[]',
        'customized_information' => '\Towa\GebruederWeissSDK\Model\CustomizedInformation[]',
        'logistics_addresses' => '\Towa\GebruederWeissSDK\Model\LogisticsAddress[]',
        'logistics_requirements' => '\Towa\GebruederWeissSDK\Model\LogisticsRequirements',
        'order_lines' => '\Towa\GebruederWeissSDK\Model\OrderLine[]',
        'measurements' => '\Towa\GebruederWeissSDK\Model\Measurement[]',
        'dimension' => '\Towa\GebruederWeissSDK\Model\Dimension',
        'values' => '\Towa\GebruederWeissSDK\Model\Value[]',
        'goods_item' => '\Towa\GebruederWeissSDK\Model\GoodsItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'customer_id' => 'int32',
        'customer_order' => null,
        'creation_date_time' => 'date-time',
        'warehouse_id' => null,
        'references' => null,
        'customized_information' => null,
        'logistics_addresses' => null,
        'logistics_requirements' => null,
        'order_lines' => null,
        'measurements' => null,
        'dimension' => null,
        'values' => null,
        'goods_item' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
        'customer_id' => 'customerId',
        'customer_order' => 'customerOrder',
        'creation_date_time' => 'creationDateTime',
        'warehouse_id' => 'warehouseId',
        'references' => 'references',
        'customized_information' => 'customizedInformation',
        'logistics_addresses' => 'logisticsAddresses',
        'logistics_requirements' => 'logisticsRequirements',
        'order_lines' => 'orderLines',
        'measurements' => 'measurements',
        'dimension' => 'dimension',
        'values' => 'values',
        'goods_item' => 'goodsItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'customer_id' => 'setCustomerId',
        'customer_order' => 'setCustomerOrder',
        'creation_date_time' => 'setCreationDateTime',
        'warehouse_id' => 'setWarehouseId',
        'references' => 'setReferences',
        'customized_information' => 'setCustomizedInformation',
        'logistics_addresses' => 'setLogisticsAddresses',
        'logistics_requirements' => 'setLogisticsRequirements',
        'order_lines' => 'setOrderLines',
        'measurements' => 'setMeasurements',
        'dimension' => 'setDimension',
        'values' => 'setValues',
        'goods_item' => 'setGoodsItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'customer_id' => 'getCustomerId',
        'customer_order' => 'getCustomerOrder',
        'creation_date_time' => 'getCreationDateTime',
        'warehouse_id' => 'getWarehouseId',
        'references' => 'getReferences',
        'customized_information' => 'getCustomizedInformation',
        'logistics_addresses' => 'getLogisticsAddresses',
        'logistics_requirements' => 'getLogisticsRequirements',
        'order_lines' => 'getOrderLines',
        'measurements' => 'getMeasurements',
        'dimension' => 'getDimension',
        'values' => 'getValues',
        'goods_item' => 'getGoodsItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_order'] = $data['customer_order'] ?? null;
        $this->container['creation_date_time'] = $data['creation_date_time'] ?? null;
        $this->container['warehouse_id'] = $data['warehouse_id'] ?? null;
        $this->container['references'] = $data['references'] ?? null;
        $this->container['customized_information'] = $data['customized_information'] ?? null;
        $this->container['logistics_addresses'] = $data['logistics_addresses'] ?? null;
        $this->container['logistics_requirements'] = $data['logistics_requirements'] ?? null;
        $this->container['order_lines'] = $data['order_lines'] ?? null;
        $this->container['measurements'] = $data['measurements'] ?? null;
        $this->container['dimension'] = $data['dimension'] ?? null;
        $this->container['values'] = $data['values'] ?? null;
        $this->container['goods_item'] = $data['goods_item'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['order_id']) && !preg_match("/[0-9A-Z]{10}/", $this->container['order_id'])) {
            $invalidProperties[] = "invalid value for 'order_id', must be conform to the pattern /[0-9A-Z]{10}/.";
        }

        if (!is_null($this->container['customer_id']) && ($this->container['customer_id'] > 9999999)) {
            $invalidProperties[] = "invalid value for 'customer_id', must be smaller than or equal to 9999999.";
        }

        if (!is_null($this->container['customer_id']) && ($this->container['customer_id'] < 100000)) {
            $invalidProperties[] = "invalid value for 'customer_id', must be bigger than or equal to 100000.";
        }

        if ($this->container['customer_order'] === null) {
            $invalidProperties[] = "'customer_order' can't be null";
        }
        if ($this->container['creation_date_time'] === null) {
            $invalidProperties[] = "'creation_date_time' can't be null";
        }
        if ((mb_strlen($this->container['creation_date_time']) > 29)) {
            $invalidProperties[] = "invalid value for 'creation_date_time', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['warehouse_id']) && (mb_strlen($this->container['warehouse_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'warehouse_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['warehouse_id']) && (mb_strlen($this->container['warehouse_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'warehouse_id', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['customized_information']) && (count($this->container['customized_information']) > 20)) {
            $invalidProperties[] = "invalid value for 'customized_information', number of items must be less than or equal to 20.";
        }

        if ($this->container['logistics_addresses'] === null) {
            $invalidProperties[] = "'logistics_addresses' can't be null";
        }
        if ((count($this->container['logistics_addresses']) < 1)) {
            $invalidProperties[] = "invalid value for 'logistics_addresses', number of items must be greater than or equal to 1.";
        }

        if ($this->container['order_lines'] === null) {
            $invalidProperties[] = "'order_lines' can't be null";
        }
        if ((count($this->container['order_lines']) > 999)) {
            $invalidProperties[] = "invalid value for 'order_lines', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['order_lines']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_lines', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['goods_item']) && (count($this->container['goods_item']) > 999)) {
            $invalidProperties[] = "invalid value for 'goods_item', number of items must be less than or equal to 999.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id the GW orderId is always a 10 digit number
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (!is_null($order_id) && (mb_strlen($order_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling LogisticsOrder., must be smaller than or equal to 10.');
        }
        if (!is_null($order_id) && (mb_strlen($order_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling LogisticsOrder., must be bigger than or equal to 10.');
        }
        if (!is_null($order_id) && (!preg_match("/[0-9A-Z]{10}/", $order_id))) {
            throw new \InvalidArgumentException("invalid value for $order_id when calling LogisticsOrder., must conform to the pattern /[0-9A-Z]{10}/.");
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id customer account number of GW
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {

        if (!is_null($customer_id) && ($customer_id > 9999999)) {
            throw new \InvalidArgumentException('invalid value for $customer_id when calling LogisticsOrder., must be smaller than or equal to 9999999.');
        }
        if (!is_null($customer_id) && ($customer_id < 100000)) {
            throw new \InvalidArgumentException('invalid value for $customer_id when calling LogisticsOrder., must be bigger than or equal to 100000.');
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_order
     *
     * @return string
     */
    public function getCustomerOrder()
    {
        return $this->container['customer_order'];
    }

    /**
     * Sets customer_order
     *
     * @param string $customer_order reference from the customer
     *
     * @return self
     */
    public function setCustomerOrder($customer_order)
    {
        $this->container['customer_order'] = $customer_order;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return \DateTime
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param \DateTime $creation_date_time date / time in format yyyy-mm-ddThh:mm:ss.mmm±hh:mm following the RFC 3339 standard, see https://tools.ietf.org/html/rfc3339
     *
     * @return self
     */
    public function setCreationDateTime($creation_date_time)
    {
        if ((mb_strlen($creation_date_time) > 29)) {
            throw new \InvalidArgumentException('invalid length for $creation_date_time when calling LogisticsOrder., must be smaller than or equal to 29.');
        }

        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (!is_null($warehouse_id) && (mb_strlen($warehouse_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_id when calling LogisticsOrder., must be smaller than or equal to 12.');
        }
        if (!is_null($warehouse_id) && (mb_strlen($warehouse_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_id when calling LogisticsOrder., must be bigger than or equal to 10.');
        }

        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Towa\GebruederWeissSDK\Model\Reference[]|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \Towa\GebruederWeissSDK\Model\Reference[]|null $references array of references for this order
     *
     * @return self
     */
    public function setReferences($references)
    {


        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets customized_information
     *
     * @return \Towa\GebruederWeissSDK\Model\CustomizedInformation[]|null
     */
    public function getCustomizedInformation()
    {
        return $this->container['customized_information'];
    }

    /**
     * Sets customized_information
     *
     * @param \Towa\GebruederWeissSDK\Model\CustomizedInformation[]|null $customized_information customized_information
     *
     * @return self
     */
    public function setCustomizedInformation($customized_information)
    {

        if (!is_null($customized_information) && (count($customized_information) > 20)) {
            throw new \InvalidArgumentException('invalid value for $customized_information when calling LogisticsOrder., number of items must be less than or equal to 20.');
        }
        $this->container['customized_information'] = $customized_information;

        return $this;
    }

    /**
     * Gets logistics_addresses
     *
     * @return \Towa\GebruederWeissSDK\Model\LogisticsAddress[]
     */
    public function getLogisticsAddresses()
    {
        return $this->container['logistics_addresses'];
    }

    /**
     * Sets logistics_addresses
     *
     * @param \Towa\GebruederWeissSDK\Model\LogisticsAddress[] $logistics_addresses involved addresses for this logistics order
     *
     * @return self
     */
    public function setLogisticsAddresses($logistics_addresses)
    {


        if ((count($logistics_addresses) < 1)) {
            throw new \InvalidArgumentException('invalid length for $logistics_addresses when calling LogisticsOrder., number of items must be greater than or equal to 1.');
        }
        $this->container['logistics_addresses'] = $logistics_addresses;

        return $this;
    }

    /**
     * Gets logistics_requirements
     *
     * @return \Towa\GebruederWeissSDK\Model\LogisticsRequirements|null
     */
    public function getLogisticsRequirements()
    {
        return $this->container['logistics_requirements'];
    }

    /**
     * Sets logistics_requirements
     *
     * @param \Towa\GebruederWeissSDK\Model\LogisticsRequirements|null $logistics_requirements logistics_requirements
     *
     * @return self
     */
    public function setLogisticsRequirements($logistics_requirements)
    {
        $this->container['logistics_requirements'] = $logistics_requirements;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Towa\GebruederWeissSDK\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Towa\GebruederWeissSDK\Model\OrderLine[] $order_lines identified items to be handled
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {

        if ((count($order_lines) > 999)) {
            throw new \InvalidArgumentException('invalid value for $order_lines when calling LogisticsOrder., number of items must be less than or equal to 999.');
        }
        if ((count($order_lines) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_lines when calling LogisticsOrder., number of items must be greater than or equal to 1.');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets measurements
     *
     * @return \Towa\GebruederWeissSDK\Model\Measurement[]|null
     */
    public function getMeasurements()
    {
        return $this->container['measurements'];
    }

    /**
     * Sets measurements
     *
     * @param \Towa\GebruederWeissSDK\Model\Measurement[]|null $measurements measurements
     *
     * @return self
     */
    public function setMeasurements($measurements)
    {


        $this->container['measurements'] = $measurements;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return \Towa\GebruederWeissSDK\Model\Dimension|null
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param \Towa\GebruederWeissSDK\Model\Dimension|null $dimension dimension
     *
     * @return self
     */
    public function setDimension($dimension)
    {
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Towa\GebruederWeissSDK\Model\Value[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Towa\GebruederWeissSDK\Model\Value[]|null $values values
     *
     * @return self
     */
    public function setValues($values)
    {


        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets goods_item
     *
     * @return \Towa\GebruederWeissSDK\Model\GoodsItem[]|null
     */
    public function getGoodsItem()
    {
        return $this->container['goods_item'];
    }

    /**
     * Sets goods_item
     *
     * @param \Towa\GebruederWeissSDK\Model\GoodsItem[]|null $goods_item packed goods item to be transported
     *
     * @return self
     */
    public function setGoodsItem($goods_item)
    {

        if (!is_null($goods_item) && (count($goods_item) > 999)) {
            throw new \InvalidArgumentException('invalid value for $goods_item when calling LogisticsOrder., number of items must be less than or equal to 999.');
        }
        $this->container['goods_item'] = $goods_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



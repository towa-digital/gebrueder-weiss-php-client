<?php
/**
 * GWWarehouseId
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Towa\GebruederWeissSDK\Model;

use \ArrayAccess;
use \Towa\GebruederWeissSDK\ObjectSerializer;

/**
 * GWWarehouseId Class Doc Comment
 *
 * @category Class
 * @description object identifying a warehouse
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GWWarehouseId implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GWWarehouseId';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'int',
        'warehouse_location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => 'int32',
        'warehouse_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customerId',
        'warehouse_location' => 'warehouseLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'warehouse_location' => 'setWarehouseLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'warehouse_location' => 'getWarehouseLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const WAREHOUSE_LOCATION_GWATL = 'GWATL';
    const WAREHOUSE_LOCATION_GWCHI = 'GWCHI';
    const WAREHOUSE_LOCATION_GWLAX = 'GWLAX';
    const WAREHOUSE_LOCATION_GWTEST = 'GWTEST';
    const WAREHOUSE_LOCATION_GWTOR = 'GWTOR';
    const WAREHOUSE_LOCATION_GWVAN = 'GWVAN';
    const WAREHOUSE_LOCATION_GWALT = 'GWALT';
    const WAREHOUSE_LOCATION_GWALY = 'GWALY';
    const WAREHOUSE_LOCATION_GWBAS = 'GWBAS';
    const WAREHOUSE_LOCATION_GWBRN = 'GWBRN';
    const WAREHOUSE_LOCATION_GWBUK = 'GWBUK';
    const WAREHOUSE_LOCATION_GWCKG = 'GWCKG';
    const WAREHOUSE_LOCATION_GWCTU = 'GWCTU';
    const WAREHOUSE_LOCATION_GWDUN = 'GWDUN';
    const WAREHOUSE_LOCATION_GWDXB = 'GWDXB';
    const WAREHOUSE_LOCATION_GWFEL = 'GWFEL';
    const WAREHOUSE_LOCATION_GWGRA = 'GWGRA';
    const WAREHOUSE_LOCATION_GWGYO = 'GWGYO';
    const WAREHOUSE_LOCATION_GWHCM = 'GWHCM';
    const WAREHOUSE_LOCATION_GWHKG = 'GWHKG';
    const WAREHOUSE_LOCATION_GW_HALL = 'GWHall';
    const WAREHOUSE_LOCATION_GWJEN = 'GWJEN';
    const WAREHOUSE_LOCATION_GWLAU = 'GWLAU';
    const WAREHOUSE_LOCATION_GWLIN = 'GWLIN';
    const WAREHOUSE_LOCATION_GWMEM = 'GWMEM';
    const WAREHOUSE_LOCATION_GWMLD = 'GWMLD';
    const WAREHOUSE_LOCATION_GWMSA = 'GWMSA';
    const WAREHOUSE_LOCATION_GWNUR = 'GWNUR';
    const WAREHOUSE_LOCATION_GWOST = 'GWOST';
    const WAREHOUSE_LOCATION_GWPAS = 'GWPAS';
    const WAREHOUSE_LOCATION_GWPOC = 'GWPOC';
    const WAREHOUSE_LOCATION_GWSEN = 'GWSEN';
    const WAREHOUSE_LOCATION_GWSGP = 'GWSGP';
    const WAREHOUSE_LOCATION_GWSZX = 'GWSZX';
    const WAREHOUSE_LOCATION_GWIBI = 'GWIBI';
    const WAREHOUSE_LOCATION_GWTEC = 'GWTEC';
    const WAREHOUSE_LOCATION_GWTUT = 'GWTUT';
    const WAREHOUSE_LOCATION_GWTYO = 'GWTYO';
    const WAREHOUSE_LOCATION_GWWOL = 'GWWOL';
    const WAREHOUSE_LOCATION_GWWOR = 'GWWOR';
    const WAREHOUSE_LOCATION_GWZAG = 'GWZAG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarehouseLocationAllowableValues()
    {
        return [
            self::WAREHOUSE_LOCATION_GWATL,
            self::WAREHOUSE_LOCATION_GWCHI,
            self::WAREHOUSE_LOCATION_GWLAX,
            self::WAREHOUSE_LOCATION_GWTEST,
            self::WAREHOUSE_LOCATION_GWTOR,
            self::WAREHOUSE_LOCATION_GWVAN,
            self::WAREHOUSE_LOCATION_GWALT,
            self::WAREHOUSE_LOCATION_GWALY,
            self::WAREHOUSE_LOCATION_GWBAS,
            self::WAREHOUSE_LOCATION_GWBRN,
            self::WAREHOUSE_LOCATION_GWBUK,
            self::WAREHOUSE_LOCATION_GWCKG,
            self::WAREHOUSE_LOCATION_GWCTU,
            self::WAREHOUSE_LOCATION_GWDUN,
            self::WAREHOUSE_LOCATION_GWDXB,
            self::WAREHOUSE_LOCATION_GWFEL,
            self::WAREHOUSE_LOCATION_GWGRA,
            self::WAREHOUSE_LOCATION_GWGYO,
            self::WAREHOUSE_LOCATION_GWHCM,
            self::WAREHOUSE_LOCATION_GWHKG,
            self::WAREHOUSE_LOCATION_GW_HALL,
            self::WAREHOUSE_LOCATION_GWJEN,
            self::WAREHOUSE_LOCATION_GWLAU,
            self::WAREHOUSE_LOCATION_GWLIN,
            self::WAREHOUSE_LOCATION_GWMEM,
            self::WAREHOUSE_LOCATION_GWMLD,
            self::WAREHOUSE_LOCATION_GWMSA,
            self::WAREHOUSE_LOCATION_GWNUR,
            self::WAREHOUSE_LOCATION_GWOST,
            self::WAREHOUSE_LOCATION_GWPAS,
            self::WAREHOUSE_LOCATION_GWPOC,
            self::WAREHOUSE_LOCATION_GWSEN,
            self::WAREHOUSE_LOCATION_GWSGP,
            self::WAREHOUSE_LOCATION_GWSZX,
            self::WAREHOUSE_LOCATION_GWIBI,
            self::WAREHOUSE_LOCATION_GWTEC,
            self::WAREHOUSE_LOCATION_GWTUT,
            self::WAREHOUSE_LOCATION_GWTYO,
            self::WAREHOUSE_LOCATION_GWWOL,
            self::WAREHOUSE_LOCATION_GWWOR,
            self::WAREHOUSE_LOCATION_GWZAG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['warehouse_location'] = $data['warehouse_location'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer_id']) && ($this->container['customer_id'] > 9999999)) {
            $invalidProperties[] = "invalid value for 'customer_id', must be smaller than or equal to 9999999.";
        }

        if (!is_null($this->container['customer_id']) && ($this->container['customer_id'] < 100000)) {
            $invalidProperties[] = "invalid value for 'customer_id', must be bigger than or equal to 100000.";
        }

        $allowedValues = $this->getWarehouseLocationAllowableValues();
        if (!is_null($this->container['warehouse_location']) && !in_array($this->container['warehouse_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warehouse_location', must be one of '%s'",
                $this->container['warehouse_location'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['warehouse_location']) && (mb_strlen($this->container['warehouse_location']) > 6)) {
            $invalidProperties[] = "invalid value for 'warehouse_location', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['warehouse_location']) && (mb_strlen($this->container['warehouse_location']) < 3)) {
            $invalidProperties[] = "invalid value for 'warehouse_location', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id customer account numnber of GW
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {

        if (!is_null($customer_id) && ($customer_id > 9999999)) {
            throw new \InvalidArgumentException('invalid value for $customer_id when calling GWWarehouseId., must be smaller than or equal to 9999999.');
        }
        if (!is_null($customer_id) && ($customer_id < 100000)) {
            throw new \InvalidArgumentException('invalid value for $customer_id when calling GWWarehouseId., must be bigger than or equal to 100000.');
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets warehouse_location
     *
     * @return string|null
     */
    public function getWarehouseLocation()
    {
        return $this->container['warehouse_location'];
    }

    /**
     * Sets warehouse_location
     *
     * @param string|null $warehouse_location warehouse_location
     *
     * @return self
     */
    public function setWarehouseLocation($warehouse_location)
    {
        $allowedValues = $this->getWarehouseLocationAllowableValues();
        if (!is_null($warehouse_location) && !in_array($warehouse_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warehouse_location', must be one of '%s'",
                    $warehouse_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($warehouse_location) && (mb_strlen($warehouse_location) > 6)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_location when calling GWWarehouseId., must be smaller than or equal to 6.');
        }
        if (!is_null($warehouse_location) && (mb_strlen($warehouse_location) < 3)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_location when calling GWWarehouseId., must be bigger than or equal to 3.');
        }

        $this->container['warehouse_location'] = $warehouse_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * OrderCurrentStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.beck@gw-world.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderCurrentStatus Class Doc Comment
 *
 * @category Class
 * @description contains a referenced order with the actual status and (if feasible) the estimated time of arrival
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCurrentStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCurrentStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_referenced' => '\Swagger\Client\Model\OrderReferenced',
'status_current' => '\Swagger\Client\Model\Event',
'eta_info' => '\Swagger\Client\Model\EtaInfo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_referenced' => null,
'status_current' => null,
'eta_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_referenced' => 'orderReferenced',
'status_current' => 'statusCurrent',
'eta_info' => 'etaInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_referenced' => 'setOrderReferenced',
'status_current' => 'setStatusCurrent',
'eta_info' => 'setEtaInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_referenced' => 'getOrderReferenced',
'status_current' => 'getStatusCurrent',
'eta_info' => 'getEtaInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_referenced'] = isset($data['order_referenced']) ? $data['order_referenced'] : null;
        $this->container['status_current'] = isset($data['status_current']) ? $data['status_current'] : null;
        $this->container['eta_info'] = isset($data['eta_info']) ? $data['eta_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_referenced
     *
     * @return \Swagger\Client\Model\OrderReferenced
     */
    public function getOrderReferenced()
    {
        return $this->container['order_referenced'];
    }

    /**
     * Sets order_referenced
     *
     * @param \Swagger\Client\Model\OrderReferenced $order_referenced order_referenced
     *
     * @return $this
     */
    public function setOrderReferenced($order_referenced)
    {
        $this->container['order_referenced'] = $order_referenced;

        return $this;
    }

    /**
     * Gets status_current
     *
     * @return \Swagger\Client\Model\Event
     */
    public function getStatusCurrent()
    {
        return $this->container['status_current'];
    }

    /**
     * Sets status_current
     *
     * @param \Swagger\Client\Model\Event $status_current status_current
     *
     * @return $this
     */
    public function setStatusCurrent($status_current)
    {
        $this->container['status_current'] = $status_current;

        return $this;
    }

    /**
     * Gets eta_info
     *
     * @return \Swagger\Client\Model\EtaInfo
     */
    public function getEtaInfo()
    {
        return $this->container['eta_info'];
    }

    /**
     * Sets eta_info
     *
     * @param \Swagger\Client\Model\EtaInfo $eta_info eta_info
     *
     * @return $this
     */
    public function setEtaInfo($eta_info)
    {
        $this->container['eta_info'] = $eta_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

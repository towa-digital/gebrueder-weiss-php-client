<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.beck@gw-world.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @description status object, collecting all information of a status event
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_code' => '\Swagger\Client\Model\GWEventCode',
'event_description' => '\Swagger\Client\Model\Translation',
'event_reason_code' => '\Swagger\Client\Model\GWEventReasonCode',
'event_reason' => '\Swagger\Client\Model\Translation',
'my_gw_status_code' => '\Swagger\Client\Model\MyGWStatusCode',
'location' => '\Swagger\Client\Model\Location',
'event_date_time' => '\Swagger\Client\Model\\DateTime',
'event_signee' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_code' => null,
'event_description' => null,
'event_reason_code' => null,
'event_reason' => null,
'my_gw_status_code' => null,
'location' => null,
'event_date_time' => null,
'event_signee' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_code' => 'eventCode',
'event_description' => 'eventDescription',
'event_reason_code' => 'eventReasonCode',
'event_reason' => 'eventReason',
'my_gw_status_code' => 'myGwStatusCode',
'location' => 'location',
'event_date_time' => 'eventDateTime',
'event_signee' => 'eventSignee'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_code' => 'setEventCode',
'event_description' => 'setEventDescription',
'event_reason_code' => 'setEventReasonCode',
'event_reason' => 'setEventReason',
'my_gw_status_code' => 'setMyGwStatusCode',
'location' => 'setLocation',
'event_date_time' => 'setEventDateTime',
'event_signee' => 'setEventSignee'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_code' => 'getEventCode',
'event_description' => 'getEventDescription',
'event_reason_code' => 'getEventReasonCode',
'event_reason' => 'getEventReason',
'my_gw_status_code' => 'getMyGwStatusCode',
'location' => 'getLocation',
'event_date_time' => 'getEventDateTime',
'event_signee' => 'getEventSignee'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_code'] = isset($data['event_code']) ? $data['event_code'] : null;
        $this->container['event_description'] = isset($data['event_description']) ? $data['event_description'] : null;
        $this->container['event_reason_code'] = isset($data['event_reason_code']) ? $data['event_reason_code'] : null;
        $this->container['event_reason'] = isset($data['event_reason']) ? $data['event_reason'] : null;
        $this->container['my_gw_status_code'] = isset($data['my_gw_status_code']) ? $data['my_gw_status_code'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['event_date_time'] = isset($data['event_date_time']) ? $data['event_date_time'] : null;
        $this->container['event_signee'] = isset($data['event_signee']) ? $data['event_signee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_code
     *
     * @return \Swagger\Client\Model\GWEventCode
     */
    public function getEventCode()
    {
        return $this->container['event_code'];
    }

    /**
     * Sets event_code
     *
     * @param \Swagger\Client\Model\GWEventCode $event_code event_code
     *
     * @return $this
     */
    public function setEventCode($event_code)
    {
        $this->container['event_code'] = $event_code;

        return $this;
    }

    /**
     * Gets event_description
     *
     * @return \Swagger\Client\Model\Translation
     */
    public function getEventDescription()
    {
        return $this->container['event_description'];
    }

    /**
     * Sets event_description
     *
     * @param \Swagger\Client\Model\Translation $event_description event_description
     *
     * @return $this
     */
    public function setEventDescription($event_description)
    {
        $this->container['event_description'] = $event_description;

        return $this;
    }

    /**
     * Gets event_reason_code
     *
     * @return \Swagger\Client\Model\GWEventReasonCode
     */
    public function getEventReasonCode()
    {
        return $this->container['event_reason_code'];
    }

    /**
     * Sets event_reason_code
     *
     * @param \Swagger\Client\Model\GWEventReasonCode $event_reason_code event_reason_code
     *
     * @return $this
     */
    public function setEventReasonCode($event_reason_code)
    {
        $this->container['event_reason_code'] = $event_reason_code;

        return $this;
    }

    /**
     * Gets event_reason
     *
     * @return \Swagger\Client\Model\Translation
     */
    public function getEventReason()
    {
        return $this->container['event_reason'];
    }

    /**
     * Sets event_reason
     *
     * @param \Swagger\Client\Model\Translation $event_reason event_reason
     *
     * @return $this
     */
    public function setEventReason($event_reason)
    {
        $this->container['event_reason'] = $event_reason;

        return $this;
    }

    /**
     * Gets my_gw_status_code
     *
     * @return \Swagger\Client\Model\MyGWStatusCode
     */
    public function getMyGwStatusCode()
    {
        return $this->container['my_gw_status_code'];
    }

    /**
     * Sets my_gw_status_code
     *
     * @param \Swagger\Client\Model\MyGWStatusCode $my_gw_status_code my_gw_status_code
     *
     * @return $this
     */
    public function setMyGwStatusCode($my_gw_status_code)
    {
        $this->container['my_gw_status_code'] = $my_gw_status_code;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets event_date_time
     *
     * @return \Swagger\Client\Model\\DateTime
     */
    public function getEventDateTime()
    {
        return $this->container['event_date_time'];
    }

    /**
     * Sets event_date_time
     *
     * @param \Swagger\Client\Model\\DateTime $event_date_time event_date_time
     *
     * @return $this
     */
    public function setEventDateTime($event_date_time)
    {
        $this->container['event_date_time'] = $event_date_time;

        return $this;
    }

    /**
     * Gets event_signee
     *
     * @return string
     */
    public function getEventSignee()
    {
        return $this->container['event_signee'];
    }

    /**
     * Sets event_signee
     *
     * @param string $event_signee Person (or system) which reported the event or signed it
     *
     * @return $this
     */
    public function setEventSignee($event_signee)
    {
        $this->container['event_signee'] = $event_signee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

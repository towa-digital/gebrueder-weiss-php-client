<?php
/**
 * EtaInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.beck@gw-world.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EtaInfo Class Doc Comment
 *
 * @category Class
 * @description describes a time window for the estimated time of arrival
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EtaInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EtaInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eta_specification' => 'string',
'estimated_time_of_arrival_min' => '\Swagger\Client\Model\\DateTime',
'estimated_time_of_arrival_max' => '\Swagger\Client\Model\\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eta_specification' => null,
'estimated_time_of_arrival_min' => null,
'estimated_time_of_arrival_max' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eta_specification' => 'etaSpecification',
'estimated_time_of_arrival_min' => 'estimatedTimeOfArrivalMin',
'estimated_time_of_arrival_max' => 'estimatedTimeOfArrivalMax'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eta_specification' => 'setEtaSpecification',
'estimated_time_of_arrival_min' => 'setEstimatedTimeOfArrivalMin',
'estimated_time_of_arrival_max' => 'setEstimatedTimeOfArrivalMax'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eta_specification' => 'getEtaSpecification',
'estimated_time_of_arrival_min' => 'getEstimatedTimeOfArrivalMin',
'estimated_time_of_arrival_max' => 'getEstimatedTimeOfArrivalMax'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ETA_SPECIFICATION_ATA_AT_RECIPIENT = 'ATA at recipient';
const ETA_SPECIFICATION_ETA_AT_RECIPIENT = 'ETA at recipient';
const ETA_SPECIFICATION_ATA_AT_DESTINATION__AIRPORT = 'ATA at destination (air)port';
const ETA_SPECIFICATION_ETA_AT_DESTINATION__AIRPORT = 'ETA at destination (air)port';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEtaSpecificationAllowableValues()
    {
        return [
            self::ETA_SPECIFICATION_ATA_AT_RECIPIENT,
self::ETA_SPECIFICATION_ETA_AT_RECIPIENT,
self::ETA_SPECIFICATION_ATA_AT_DESTINATION__AIRPORT,
self::ETA_SPECIFICATION_ETA_AT_DESTINATION__AIRPORT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eta_specification'] = isset($data['eta_specification']) ? $data['eta_specification'] : null;
        $this->container['estimated_time_of_arrival_min'] = isset($data['estimated_time_of_arrival_min']) ? $data['estimated_time_of_arrival_min'] : null;
        $this->container['estimated_time_of_arrival_max'] = isset($data['estimated_time_of_arrival_max']) ? $data['estimated_time_of_arrival_max'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEtaSpecificationAllowableValues();
        if (!is_null($this->container['eta_specification']) && !in_array($this->container['eta_specification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'eta_specification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eta_specification
     *
     * @return string
     */
    public function getEtaSpecification()
    {
        return $this->container['eta_specification'];
    }

    /**
     * Sets eta_specification
     *
     * @param string $eta_specification how is the ETA calculated, what does it express
     *
     * @return $this
     */
    public function setEtaSpecification($eta_specification)
    {
        $allowedValues = $this->getEtaSpecificationAllowableValues();
        if (!is_null($eta_specification) && !in_array($eta_specification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eta_specification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eta_specification'] = $eta_specification;

        return $this;
    }

    /**
     * Gets estimated_time_of_arrival_min
     *
     * @return \Swagger\Client\Model\\DateTime
     */
    public function getEstimatedTimeOfArrivalMin()
    {
        return $this->container['estimated_time_of_arrival_min'];
    }

    /**
     * Sets estimated_time_of_arrival_min
     *
     * @param \Swagger\Client\Model\\DateTime $estimated_time_of_arrival_min estimated_time_of_arrival_min
     *
     * @return $this
     */
    public function setEstimatedTimeOfArrivalMin($estimated_time_of_arrival_min)
    {
        $this->container['estimated_time_of_arrival_min'] = $estimated_time_of_arrival_min;

        return $this;
    }

    /**
     * Gets estimated_time_of_arrival_max
     *
     * @return \Swagger\Client\Model\\DateTime
     */
    public function getEstimatedTimeOfArrivalMax()
    {
        return $this->container['estimated_time_of_arrival_max'];
    }

    /**
     * Sets estimated_time_of_arrival_max
     *
     * @param \Swagger\Client\Model\\DateTime $estimated_time_of_arrival_max estimated_time_of_arrival_max
     *
     * @return $this
     */
    public function setEstimatedTimeOfArrivalMax($estimated_time_of_arrival_max)
    {
        $this->container['estimated_time_of_arrival_max'] = $estimated_time_of_arrival_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

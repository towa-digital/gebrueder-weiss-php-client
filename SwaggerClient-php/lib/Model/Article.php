<?php
/**
 * Article
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.beck@gw-world.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Article Class Doc Comment
 *
 * @category Class
 * @description Article
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Article implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Article';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_item_number' => 'float',
'article_id' => 'float',
'variant' => 'string',
'gtin' => 'string',
'quantity' => 'float',
'article_description' => '\Swagger\Client\Model\LingualText',
'external' => '\Swagger\Client\Model\External',
'measurement' => '\Swagger\Client\Model\Measurement',
'reference' => '\Swagger\Client\Model\ArticleReference',
'logisticsrequirement' => '\Swagger\Client\Model\LogisticsRequirementsOrderLine'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_item_number' => null,
'article_id' => null,
'variant' => null,
'gtin' => null,
'quantity' => null,
'article_description' => null,
'external' => null,
'measurement' => null,
'reference' => null,
'logisticsrequirement' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_item_number' => 'lineItemNumber',
'article_id' => 'articleId',
'variant' => 'variant',
'gtin' => 'gtin',
'quantity' => 'quantity',
'article_description' => 'articleDescription',
'external' => 'external',
'measurement' => 'measurement',
'reference' => 'reference',
'logisticsrequirement' => 'logisticsrequirement'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_item_number' => 'setLineItemNumber',
'article_id' => 'setArticleId',
'variant' => 'setVariant',
'gtin' => 'setGtin',
'quantity' => 'setQuantity',
'article_description' => 'setArticleDescription',
'external' => 'setExternal',
'measurement' => 'setMeasurement',
'reference' => 'setReference',
'logisticsrequirement' => 'setLogisticsrequirement'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_item_number' => 'getLineItemNumber',
'article_id' => 'getArticleId',
'variant' => 'getVariant',
'gtin' => 'getGtin',
'quantity' => 'getQuantity',
'article_description' => 'getArticleDescription',
'external' => 'getExternal',
'measurement' => 'getMeasurement',
'reference' => 'getReference',
'logisticsrequirement' => 'getLogisticsrequirement'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_item_number'] = isset($data['line_item_number']) ? $data['line_item_number'] : null;
        $this->container['article_id'] = isset($data['article_id']) ? $data['article_id'] : null;
        $this->container['variant'] = isset($data['variant']) ? $data['variant'] : null;
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['article_description'] = isset($data['article_description']) ? $data['article_description'] : null;
        $this->container['external'] = isset($data['external']) ? $data['external'] : null;
        $this->container['measurement'] = isset($data['measurement']) ? $data['measurement'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['logisticsrequirement'] = isset($data['logisticsrequirement']) ? $data['logisticsrequirement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_item_number
     *
     * @return float
     */
    public function getLineItemNumber()
    {
        return $this->container['line_item_number'];
    }

    /**
     * Sets line_item_number
     *
     * @param float $line_item_number unique customer line item number
     *
     * @return $this
     */
    public function setLineItemNumber($line_item_number)
    {
        $this->container['line_item_number'] = $line_item_number;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return float
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param float $article_id article identification number
     *
     * @return $this
     */
    public function setArticleId($article_id)
    {
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string $variant article variant
     *
     * @return $this
     */
    public function setVariant($variant)
    {
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string $gtin GTIN-Number (EAN)
     *
     * @return $this
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity of article
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets article_description
     *
     * @return \Swagger\Client\Model\LingualText
     */
    public function getArticleDescription()
    {
        return $this->container['article_description'];
    }

    /**
     * Sets article_description
     *
     * @param \Swagger\Client\Model\LingualText $article_description article_description
     *
     * @return $this
     */
    public function setArticleDescription($article_description)
    {
        $this->container['article_description'] = $article_description;

        return $this;
    }

    /**
     * Gets external
     *
     * @return \Swagger\Client\Model\External
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param \Swagger\Client\Model\External $external external
     *
     * @return $this
     */
    public function setExternal($external)
    {
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets measurement
     *
     * @return \Swagger\Client\Model\Measurement
     */
    public function getMeasurement()
    {
        return $this->container['measurement'];
    }

    /**
     * Sets measurement
     *
     * @param \Swagger\Client\Model\Measurement $measurement measurement
     *
     * @return $this
     */
    public function setMeasurement($measurement)
    {
        $this->container['measurement'] = $measurement;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return \Swagger\Client\Model\ArticleReference
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param \Swagger\Client\Model\ArticleReference $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets logisticsrequirement
     *
     * @return \Swagger\Client\Model\LogisticsRequirementsOrderLine
     */
    public function getLogisticsrequirement()
    {
        return $this->container['logisticsrequirement'];
    }

    /**
     * Sets logisticsrequirement
     *
     * @param \Swagger\Client\Model\LogisticsRequirementsOrderLine $logisticsrequirement logisticsrequirement
     *
     * @return $this
     */
    public function setLogisticsrequirement($logisticsrequirement)
    {
        $this->container['logisticsrequirement'] = $logisticsrequirement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

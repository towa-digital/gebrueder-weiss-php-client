<?php
/**
 * AdditionalService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * OpenAPI spec version: 1.0.0
 * Contact: michael.beck@gw-world.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdditionalService Class Doc Comment
 *
 * @category Class
 * @description contains information of an additional service. The availability of an additional service depends on the GW product, in combination with the relation and your contract with GW.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditionalService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_service' => 'string',
'additional_service_text' => 'AllOfAdditionalServiceAdditionalServiceText',
'additional_service_attribute' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_service' => null,
'additional_service_text' => null,
'additional_service_attribute' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_service' => 'additionalService',
'additional_service_text' => 'additionalServiceText',
'additional_service_attribute' => 'additionalServiceAttribute'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_service' => 'setAdditionalService',
'additional_service_text' => 'setAdditionalServiceText',
'additional_service_attribute' => 'setAdditionalServiceAttribute'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_service' => 'getAdditionalService',
'additional_service_text' => 'getAdditionalServiceText',
'additional_service_attribute' => 'getAdditionalServiceAttribute'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDITIONAL_SERVICE__805 = '805';
const ADDITIONAL_SERVICE__807 = '807';
const ADDITIONAL_SERVICE__800 = '800';
const ADDITIONAL_SERVICE__833 = '833';
const ADDITIONAL_SERVICE__834 = '834';
const ADDITIONAL_SERVICE_F53 = 'F53';
const ADDITIONAL_SERVICE_PVZ = 'PVZ';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalServiceAllowableValues()
    {
        return [
            self::ADDITIONAL_SERVICE__805,
self::ADDITIONAL_SERVICE__807,
self::ADDITIONAL_SERVICE__800,
self::ADDITIONAL_SERVICE__833,
self::ADDITIONAL_SERVICE__834,
self::ADDITIONAL_SERVICE_F53,
self::ADDITIONAL_SERVICE_PVZ,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_service'] = isset($data['additional_service']) ? $data['additional_service'] : null;
        $this->container['additional_service_text'] = isset($data['additional_service_text']) ? $data['additional_service_text'] : null;
        $this->container['additional_service_attribute'] = isset($data['additional_service_attribute']) ? $data['additional_service_attribute'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdditionalServiceAllowableValues();
        if (!is_null($this->container['additional_service']) && !in_array($this->container['additional_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'additional_service', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_service
     *
     * @return string
     */
    public function getAdditionalService()
    {
        return $this->container['additional_service'];
    }

    /**
     * Sets additional_service
     *
     * @param string $additional_service additional service coded
     *
     * @return $this
     */
    public function setAdditionalService($additional_service)
    {
        $allowedValues = $this->getAdditionalServiceAllowableValues();
        if (!is_null($additional_service) && !in_array($additional_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'additional_service', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_service'] = $additional_service;

        return $this;
    }

    /**
     * Gets additional_service_text
     *
     * @return AllOfAdditionalServiceAdditionalServiceText
     */
    public function getAdditionalServiceText()
    {
        return $this->container['additional_service_text'];
    }

    /**
     * Sets additional_service_text
     *
     * @param AllOfAdditionalServiceAdditionalServiceText $additional_service_text additional service expressed in text. Read-only!
     *
     * @return $this
     */
    public function setAdditionalServiceText($additional_service_text)
    {
        $this->container['additional_service_text'] = $additional_service_text;

        return $this;
    }

    /**
     * Gets additional_service_attribute
     *
     * @return string
     */
    public function getAdditionalServiceAttribute()
    {
        return $this->container['additional_service_attribute'];
    }

    /**
     * Sets additional_service_attribute
     *
     * @param string $additional_service_attribute some additional service require additional information
     *
     * @return $this
     */
    public function setAdditionalServiceAttribute($additional_service_attribute)
    {
        $this->container['additional_service_attribute'] = $additional_service_attribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * DefaultApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Logistics Order
 *
 * API to create and retrieve logistics orders
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Towa\GebruederWeissSDK\Test\Api;

use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use \Towa\GebruederWeissSDK\ApiException;
use PHPUnit\Framework\TestCase;
use Towa\GebruederWeissSDK\Api\DefaultApi;
use Towa\GebruederWeissSDK\Model\ErrorMessage;
use Towa\GebruederWeissSDK\Model\InlineObject;
use Towa\GebruederWeissSDK\Model\LogisticsOrder;
use Towa\GebruederWeissSDK\Model\LogisticsOrderCallbacks;
use Towa\GebruederWeissSDK\Model\Translation;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  Towa\GebruederWeissSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getLogisticsOrderByOrderId
     *
     * by identifying your logistics-order using the orderId in the path, you get the data of the logistics-order.
     *
     */
    public function testGetLogisticsOrderByOrderId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getStatusByOrderId
     *
     * by identifying your logistics-order using the orderId in the path, you get the current status of the logistics-order.
     *
     */
    public function testGetStatusByOrderId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logisticsOrderPost
     *
     * create a logisticsOrder.
     *
     */
    public function testLogisticsOrderPostSuccessful()
    {
        $mock = new MockHandler([
            new Response(202, [], null),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $api = new DefaultApi($client);

        $payload = new InlineObject();
        $payload->setLogisticsOrder(new LogisticsOrder());
        $callbacks = new LogisticsOrderCallbacks();
        $callbacks->setSuccessCallback("https://example.com/success");
        $callbacks->setFulfillmentCallback("http://example.com/fullfilled");
        $payload->setCallbacks($callbacks);
        $response = $api->logisticsOrderPost("de-DE", $payload);

        $this->assertCount(1, $response);
    }

    public function testLogisticsOrderPostBadRequest()
    {
        $errorTranslation = new Translation();
        $errorTranslation->setTranslationOriginal("Invalid item");

        $error = new ErrorMessage();
        $error->setText($errorTranslation);

        $mock = new MockHandler([
            new Response(400, [], '{
                "text": {
                  "translationOriginal": {
                    "text": "Invalid item"
                  }
                }
              }'),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $api = new DefaultApi($client);

        try {
            $api = new DefaultApi($client);

            $payload = new InlineObject();
            $payload->setLogisticsOrder(new LogisticsOrder());
            $callbacks = new LogisticsOrderCallbacks();
            $callbacks->setSuccessCallback("https://example.com/success");
            $callbacks->setFulfillmentCallback("http://example.com/fullfilled");
            $payload->setCallbacks($callbacks);

           $api->logisticsOrderPost("de-DE", $payload);
           $this->assertTrue(false);
        } catch (ApiException $e) {
            $this->assertSame($error->getText()->getTranslationOriginal(), $e->getResponseObject()->getText()->getTranslationOriginal()->getText());
        }
    }
}

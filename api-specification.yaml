openapi: 3.0.0
info:
  title: Logistics Order
  version: 1.0.0
  description: API to create and retrieve logistics orders
  contact:
    name: API Support
    url: 'https://developer.my.gw-world.com/support'
  x-category: logistics
  x-apiId: logisticsOrderCustomer
  x-audience: external partner
servers:
  - url: 'https://apitest.gw-world.com:443/logistics/logistics-order/1.0.0'
paths:
  /logistics-order:
    post:
      summary: create a logisticsOrder
      description: posts an logisticsOrder structure to GW to create a new logisticsOrder
      parameters:
        - in: header
          description: >-
            set the response language, default is en-US - defines the language
            following the BCP 47 standard https://tools.ietf.org/html/bcp47
          name: accept-language
          schema:
            $ref: '#/components/schemas/Language'
      requestBody:
        description: request body containing logisticsOrder and callback-url
        content:
          application/json:
            schema:
              type: object
              properties:
                logisticsOrder:
                  $ref: '#/components/schemas/LogisticsOrder'
                callbacks:
                  type: object
                  description: >-
                    set of callback URL for asynchronous event respones with
                    different purpose
                  properties:
                    successCallback:
                      description: >-
                        callback for positive event, order has been accepted and
                        will be executed
                      $ref: '#/components/schemas/CallbackUrl'
                    fullfilledCallback:
                      description: callback for fullfillment
                      $ref: '#/components/schemas/CallbackUrl'
      responses:
        '202':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  orderId:
                    $ref: '#/components/schemas/GWOrderId'
          description: 'Logistics order accepted, confirmation will be sent later'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Conflict
      callbacks:
        onSuccess:
          '{$request.body.callbacks.successCallback}':
            post:
              requestBody:
                required: true
                description: 'payload for the success event, logisticsOrder has been created'
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          $ref: '#/components/schemas/GWOrderId'
                        customerOrder:
                          $ref: '#/components/schemas/Reference/properties/reference'
                        timestamp:
                          $ref: '#/components/schemas/DateTime'
                        status:
                          $ref: '#/components/schemas/EventCallback'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
        onFullfillment:
          '{$request.body.callbacks.fullfillmentCallback}':
            post:
              requestBody:
                required: true
                description: 'payload for the success event, logisticsOrder has been created'
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          $ref: '#/components/schemas/GWOrderId'
                        customerOrder:
                          $ref: '#/components/schemas/Reference/properties/reference'
                        timestamp:
                          $ref: '#/components/schemas/DateTime'
                        transportProduct:
                          $ref: >-
                            #/components/schemas/TransportProduct/properties/product
                        trackingUrl:
                          description: >-
                            tracking link for this fulfilment, if transport is
                            booked (no self-pickup)
                          type: string
                          format: url
                        status:
                          $ref: '#/components/schemas/EventCallback'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      x-throttling-tier: 1KPerMin
      security:
        - oAuthGW:
            - API_LOGISTICS_ORDER_CREATE
  '/logistics-order/{orderId}/current-status':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCurrentStatus'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        '404':
          description: Not Found
      parameters:
        - required: true
          in: path
          name: orderId
          schema:
            $ref: '#/components/schemas/GWOrderId'
        - in: query
          description: includes the calculation of an ETA if it is a logistics order
          name: calculateETA
          schema:
            default: false
            type: boolean
        - in: header
          description: >-
            set the response language, default is en-US - defines the language
            following the BCP 47 standard https://tools.ietf.org/html/bcp47
          name: accept-language
          schema:
            $ref: '#/components/schemas/Language'
      x-scope: API_LOGISTICS_ORDER_READ
      summary: >-
        by identifying your logistics-order using the orderId in the path, you
        get the current status of the logistics-order
      x-auth-type: Application & Application User
      security:
        - oAuthGW:
            - API_LOGISTICS_ORDER_READ
      x-throttling-tier: 1KPerMin
      operationId: getStatusByOrderId
  '/logistics-order/{orderId}/':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogisticsOrder'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        '404':
          description: Not Found
      parameters:
        - required: true
          in: path
          name: orderId
          schema:
            $ref: '#/components/schemas/GWOrderId'
        - in: header
          description: >-
            set the response language, default is en-US - defines the language
            following the BCP 47 standard https://tools.ietf.org/html/bcp47
          name: accept-language
          schema:
            $ref: '#/components/schemas/Language'
      x-scope: API_LOGISTICS_ORDER_READ
      summary: >-
        by identifying your logistics-order using the orderId in the path, you
        get the data of the logistics-order
      x-auth-type: Application & Application User
      security:
        - oAuthGW:
            - API_LOGISTICS_ORDER_READ
      x-throttling-tier: 1KPerMin
      operationId: getLogisticsOrderByOrderId
components:
  securitySchemes:
    oAuthGW:
      type: oauth2
      description: This API uses OAuth 2 with the client credential grant flow.
      flows:
        clientCredentials:
          scopes:
            API_LOGISTICS_ORDER_CREATE: API_LOGISTICS_ORDER_CREATE
            API_LOGISTICS_ORDER_READ: API_LOGISTICS_ORDER_READ
          tokenUrl: 'https://apitest.gw-world.com:443/token'
    default:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://apitest.gw-world.com:443/authorize'
          scopes:
            API_LOGISTICS_ORDER_READ: API_LOGISTICS_ORDER_READ
  schemas:
    Country:
      format: iso-3166
      type: string
      example: AT
      description: >-
        defines the country folowing IS-3166-1 Alpha2, see
        https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    DateTime:
      format: date-time
      type: string
      example: '2017-07-21T17:32:28.000+02:00'
      maxLength: 29
      description: >-
        date / time in format yyyy-mm-ddThh:mm:ss.mmmÂ±hh:mm following the RFC
        3339 standard, see https://tools.ietf.org/html/rfc3339
    GWCustomerId:
      description: customer account numnber of GW
      format: int32
      maximum: 9999999
      minimum: 100000
      type: integer
      example: 123456
    Incoterm:
      type: object
      description: Incoterm code and location
      properties:
        code:
          enum:
            - EXW
            - FCA
            - CPT
            - CIP
            - DAP
            - DPU
            - DDP
            - FAS
            - FOB
            - CFR
            - CIF
          type: string
          description: code accordring to Incoterms 2020
          example: DPU
        location:
          type: string
          description: place for the incoterm
          example: Wien
    MyGWStatusCode:
      enum:
        - OPEN
        - IN_PROGRESS
        - ATTENTION
        - CRITICAL
        - COMPLETED
      type: string
      description: status as in myGW shown
      example: OPEN
    GeoLocation:
      description: geographical location in longitude and latitude
      type: object
      properties:
        latitude:
          description: latitude of the event location if available
          type: number
          example: 47.4671709
        longitude:
          description: longitude of the event location if available
          type: number
          example: 9.6720238
    Location:
      type: object
      description: location e.g. of a status event
      properties:
        locationInformation:
          type: string
          description: location information
          example: Lauterach
        countryCode:
          $ref: '#/components/schemas/Country'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
    Address:
      description: address
      type: object
      properties:
        name1:
          description: name 1 of the address
          type: string
          maxLength: 35
          example: name 1
        name2:
          description: name 2 of the address
          type: string
          maxLength: 35
          example: name 2
        name3:
          description: name 3 of the address
          type: string
          maxLength: 35
          example: name 3
        name4:
          description: name 4 of the address
          type: string
          maxLength: 35
          example: name 4
        street1:
          description: street 1 of the address
          type: string
          maxLength: 35
          example: street 1
        street2:
          description: street 2 of the address
          maxLength: 35
          type: string
          example: street 2
        street3:
          description: street 3 of the address
          maxLength: 35
          type: string
          example: street 3
        postbox:
          description: postbox of the address
          maxLength: 9
          type: string
          example: postbox
        city:
          description: city of the address
          maxLength: 35
          type: string
          example: Lauterach
        zipCode:
          description: zipcode of the address
          maxLength: 9
          type: string
          example: '6923'
        countryCode:
          $ref: '#/components/schemas/Country'
        state:
          description: state or province or territory of the address
          type: string
          example: Vorarlberg
        location:
          allOf:
            - $ref: '#/components/schemas/Location'
          description: location information
    Date:
      format: date
      type: string
      example: '2020-03-10'
      description: date in format yyyy-mm-dd
    Translation:
      type: object
      description: >-
        the translation object returns a translated text. It shows the requested
        language, as well as the orignial text. If feasible the origninal text
        is translated to the requested language. If not feasible, the resolved
        text contains the English translation
      properties:
        languageRequested:
          $ref: '#/components/schemas/Language'
        translationResolved:
          $ref: '#/components/schemas/LingualText'
        translationOriginal:
          $ref: '#/components/schemas/LingualText'
    EtaInfo:
      type: object
      description: describes a time window for the estimated time of arrival
      properties:
        estimatedTimeOfArrivalMin:
          $ref: '#/components/schemas/DateTime'
        estimatedTimeOfArrivalMax:
          $ref: '#/components/schemas/DateTime'
        etaSpecification:
          enum:
            - ATA at recipient
            - ETA at recipient
            - ATA at destination (air)port
            - ETA at destination (air)port
          type: string
          description: 'how is the ETA calculated, what does it express'
          example: ETA at recipient
    LingualText:
      type: object
      description: >-
        this object contains a text plus the language identifier, showing the
        language of the given text
      properties:
        text:
          type: string
          description: text
          example: lorem ipsum
        language:
          $ref: '#/components/schemas/Language'
    GWOrderId:
      minLength: 10
      maxLength: 10
      type: string
      example: ABC4567890
      pattern: '[0-9A-Z]{10}'
      description: the GW orderId is always a 10 digit number
    OrderReferenced:
      description: >-
        shortest form of an order information, used to identify the referenced
        order in responses
      type: object
      required:
        - orderId
        - customerId
        - creationDate
      properties:
        customerId:
          $ref: '#/components/schemas/GWCustomerId'
        orderId:
          $ref: '#/components/schemas/GWOrderId'
        creationDate:
          $ref: '#/components/schemas/Date'
        references:
          description: references of the order
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Reference'
    Reference:
      description: general reference
      type: object
      properties:
        qualifier:
          type: string
          description: qualifier for the reference
          enum:
            - CUSTOMER_ORDER
            - GENERAL
            - AIR_WAYBILL
            - HOUSE_AWB
            - PARCEL_ID
            - POSITION_NUMBER
            - CONSIGNEE_SHIPMENT_NUMBER
            - MASTER_LABEL_NUMBER
            - CROSSDOCKING_ID
            - QUALITY_VALUATION_NUMBER
            - DELIVERY_NOTE
            - MOVEMENT_REFERENCE_NUMBER
            - PURCHASE_ORDER_NUMBER
            - RESERVATION_NUMBER
            - WAREHOUSE_RECEIPT_ID
            - EXTERNAL_ORDERTYPE
          example: GENERAL
        reference:
          description: reference string
          type: string
          maxLength: 35
          example: '12345'
    ErrorMessage:
      type: object
      additionalProperties: false
      description: standard structure for response messages
      properties:
        text:
          $ref: '#/components/schemas/Translation'
        logInfo:
          type: object
          description: structured information for GW support
          properties:
            code:
              type: string
              description: GW coded message
              example: '4711'
            x-apiId:
              type: string
              description: id to identify the API
              example: statusCustomerPartner
            x-correlation-Id:
              type: string
              description: GW log entry id
              example: 1234567-0
    Language:
      format: bcp47
      type: string
      example: de-DE
      maxLength: 5
      pattern: '[a-z][a-z]\-[A-Z][A-Z]'
      description: >-
        defines the language following the BCP 47 standard
        https://tools.ietf.org/html/bcp47
    AddressReference:
      description: adds additional references to an address
      type: object
      properties:
        qualifier:
          description: qualifier for the address reference
          type: string
          enum:
            - CUSTOMER_ID
            - PURCHASER_ID
            - GENERAL
            - ADDRESS_ID
            - ACCOUNT_NUMBER
            - WAREHOUSE_ID
            - GLN_ID
            - SCAC_CODE
          example: GENERAL
        reference:
          description: reference ID for the address with the given qualification
          type: string
          maxLength: 35
          example: '12345'
    Contact:
      type: object
      description: contact information
      properties:
        function:
          type: string
          description: function of the contact
          example: Purchasing Manager
        fax:
          type: string
          description: fax number of the contact
          example: +43/1/234-9
        surname:
          type: string
          description: surname of the contact
          example: Max
        name:
          type: string
          description: name of the contact
          example: Mustermann
        language:
          $ref: '#/components/schemas/Language'
        title:
          type: string
          description: title of the contact
          example: Dr.
        mobile:
          type: string
          description: mobile phone number of the contact
          example: +43/1/234
        phone:
          type: string
          description: phone number of the contact
          example: +43/1/234
        salutation:
          enum:
            - Mister
            - Misses
            - Miss
            - ''
          type: string
          description: salutation of the contact
          example: Mister
        email:
          format: email
          type: string
          example: max@mustermann.info
          description: email of the contact
    GWEventCode:
      description: gives a coded status for the order
      type: string
      enum:
        - RDGW100
        - RDGW165
        - RDGW610
        - RDGW166
        - RDGW180
        - RDGW290
        - RDGW300
        - RDGW400
        - RDGW450
        - RDGW810
        - RDGW820
        - RDGW830
        - RDGW850
        - RDGW860
        - AGW100
        - ASGWP05
        - AGWM09
        - ASGWP10
        - ASGWP20
        - ASGWP25
        - AGWM71
        - AGWI24
        - AGWM24
        - AGWM43
        - AGWM11
        - ASGWP40
        - AGWM31
        - AGWI10
        - AGWM10
        - AGWM44
        - AGWM73
        - ASGWP50
        - ASGWP53
        - ASGWP55
        - AGWM21
        - AGWM75
        - ASGWP60
        - AGWM77
        - AGWM13
        - AGWI21
        - AGWM14
        - SGW100
        - SGWOEE
        - SGWM09
        - ASGWP30
        - SGWM33
        - SGWM72
        - SGWOAE
        - SGWOVD
        - SGWM24
        - SGWM10
        - SGWM73
        - SGWO0A
        - SGWOVA
        - SGWM79
        - SGWOUV
        - SGWORD
        - SGWM21
        - SGWM75
        - SGWO0D
        - SGWM12
        - SGWM77
        - SGWM13
        - SGWM14
        - LGWIN
        - LGWIA
        - LGWIF
        - LGWON
        - LGWOA
        - LGWOF
        - '*LS2*090'
        - '*LS2*105'
        - '*LS2*110'
        - '*LS2*120'
      example: RDGW300
    Measurement:
      description: measure object to represent a measuer like a weight
      type: object
      properties:
        measureQualifier:
          description: type of the measure
          type: string
          enum:
            - NET_WEIGHT
            - GROSS_WEIGHT
            - TARE_WEIGHT
            - CHARGEABLE_WEIGHT
            - NET_VOLUME
            - GROSS_VOLUME
            - MINIMUM_TEMPERATURE
            - MAXIMUM_TEMPERATURE
            - CONTROL_TEMPERATURE
            - LOADING_UNITS
            - FLOOR_SPACE
            - TOTAL_DISTANCE
            - TOLL_DISTANCE
          example: GROSS_WEIGHT
        measureUnit:
          description: unit of the measure
          type: string
          enum:
            - FAH
            - FOT
            - FTK
            - FTQ
            - GLI
            - GRM
            - INH
            - KEL
            - KGM
            - KTM
            - LTR
            - MMT
            - MTK
            - MTQ
            - MTR
            - SMI
          example: KGM
        measure:
          description: >-
            value of the measure, e.g. the weight. Respect the number of
            decimals allowed. For weights 0 decimals. For distances 1 decimal.
            For floor spaces 2 decimals. For volumes 3 decimals. For temperature
            1 decimal.
          type: number
          format: float
          example: 123
    GWEventReasonCode:
      enum:
        - '1'
        - '2'
        - '4'
        - '5'
        - '8'
        - '9'
        - '10'
        - '11'
        - '12'
        - '14'
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
        - '22'
        - '54'
        - '56'
        - '63'
        - '64'
        - '66'
        - '67'
        - '68'
        - '69'
        - '70'
        - '72'
        - '74'
        - '80'
        - '81'
        - '82'
        - '83'
        - '84'
        - '85'
        - '89'
        - '90'
        - '95'
        - '99'
        - '100'
        - '124'
        - '138'
        - '172'
        - '711'
        - '1111'
        - '3321'
        - '3333'
        - A12
        - BC1
        - BC2
        - CA2
        - CP1
        - CP2
        - CR1
        - CR11
        - CR2
        - DG6
        - E01
        - E02
        - E11
        - E21
        - E22
        - E23
        - E24
        - E25
        - E27
        - E29
        - E31
        - E32
        - E33
        - E34
        - E35
        - E37
        - E38
        - E39
        - E40
        - E4A5
        - E4AM
        - E4AO
        - E4BS
        - E51
        - E62
        - FM4
        - FM7
        - FM8
        - MH1
        - MH6
        - MOB
        - PC1
        - RA1
      type: string
      description: 'gives and additional reason code, not mandatory'
      example: additional reason code
    GoodsItem:
      description: goods information
      type: object
      required:
        - measurements
        - position
        - description
        - quantity
        - packageType
      properties:
        position:
          type: string
          description: position of goods
          example: P1
        quantity:
          type: number
          format: float
          description: defines the quantity of shipping units
          minimum: 0.001
          maximum: 999999.999
          example: 3.25
        packageType:
          description: >-
            the package type is following the UN/ECE recommmondation 21, using 2
            character codes
          $ref: '#/components/schemas/PackageType'
        description:
          type: string
          description: description of goods
          maxLength: 200
          example: goods example
        stackable:
          type: boolean
          description: indicates the stackabiltiy of the goods
          default: false
          example: false
        measurements:
          description: goods measurements
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Measurement'
        dimensions:
          description: goods dimension
          $ref: '#/components/schemas/Dimension'
        references:
          description: goods references
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GoodsItemReference'
    PackageType:
      description: >-
        the package type is following the UN/ECE recommmondation 21, using 2
        character codes. See
        https://www.unece.org/fileadmin/DAM/cefact/recommendations/rec21/rec21rev4_ecetrd309.pdf
      type: string
      enum:
        - UC
        - CV
        - PE
        - PX
        - BE
        - PB
        - PK
      example: ''
    Dimension:
      description: goods dimension
      type: object
      properties:
        length:
          type: number
          format: float
          description: goods length
          example: 1.2
        width:
          type: number
          format: float
          description: goods width
          example: 0.8
        height:
          type: number
          format: float
          description: goods height
          example: 1.8
        dimensionUnit:
          type: string
          enum:
            - MTR
            - MMT
            - FOT
            - INH
          description: unit for the dimension
          example: MTR
    Event:
      description: 'status object, collecting all information of a status event'
      type: object
      properties:
        eventCode:
          $ref: '#/components/schemas/GWEventCode'
        eventDateTime:
          $ref: '#/components/schemas/DateTime'
        eventSignee:
          description: Person (or system) which reported the event or signed it
          type: string
          example: Michael Beck
        eventDescription:
          $ref: '#/components/schemas/Translation'
        myGwStatusCode:
          $ref: '#/components/schemas/MyGWStatusCode'
        location:
          $ref: '#/components/schemas/Location'
        eventReasonCode:
          $ref: '#/components/schemas/GWEventReasonCode'
        eventReason:
          $ref: '#/components/schemas/Translation'
        eventMetaCode:
          $ref: '#/components/schemas/GWEventMetaCode'
    GWEventMetaCode:
      description: gives a meta status for the order
      type: string
      enum:
        - RECEIVED
        - DELIVERY_PREVENTED
        - NOT_IN_DELIVERY
        - UNSUCCESSFUL_PREADVICE
        - ETA
        - UNLOADED
        - IN_TRANSIT
        - IN_DELIVERY
        - PICKED_UP
        - NO_PICKUP
        - DELIVERED
        - DAMAGED
        - SHORTAGE
        - NOT_DELIVERED
        - ACCEPTANCE_REFUSED
        - RETURN
        - INBOUND_STORAGE
        - MISSING
        - LOADED
        - EXPORT_CUSTOMS
        - HANDOVER_FROM_AGENT
        - HANDOVER_TO_AGENT
        - IMPORT_CUSTOMS
        - READY4PICKUP
        - ARRIVED_PORT
        - DELAYED
        - DEPARTED_PORT
        - SHIPPED
        - CONTAINER_DISPATCHED
        - CONTAINER_RETURN
        - REBOOKED
        - COMPLETED
        - IN_PLANNING
        - OUTBOUND_STORAGE
      example: UNLOADED
    EventCallback:
      type: object
      description: 'status object, collecting status and translation information'
      properties:
        eventCode:
          $ref: '#/components/schemas/GWEventCode'
        eventMetaCode:
          $ref: '#/components/schemas/GWEventMetaCode'
        eventReasonCode:
          $ref: '#/components/schemas/GWEventReasonCode'
        eventDescription:
          $ref: '#/components/schemas/Translation'
        eventReason:
          $ref: '#/components/schemas/Translation'
    OrderCurrentStatus:
      type: object
      additionalProperties: false
      description: >-
        contains a referenced order with the actual status and (if feasible) the
        estimated time of arrival
      properties:
        etaInfo:
          $ref: '#/components/schemas/EtaInfo'
        statusCurrent:
          $ref: '#/components/schemas/Event'
        orderReferenced:
          $ref: '#/components/schemas/OrderReferenced'
    CallbackUrl:
      description: >-
        defines the URL for an asynchronous callback. Must include https (only
        secured transfer allowed)
      type: string
      format: url
      example: 'https://ms-server.com/mycallbackurl'
    GWWarehouseId:
      type: object
      description: object identifying a warehouse
      properties:
        customerId:
          $ref: '#/components/schemas/GWCustomerId'
        warehouseLocation:
          minLength: 3
          maxLength: 6
          type: string
          enum:
            - GWATL
            - GWCHI
            - GWLAX
            - GWTEST
            - GWTOR
            - GWVAN
            - GWALT
            - GWALY
            - GWBAS
            - GWBRN
            - GWBUK
            - GWCKG
            - GWCTU
            - GWDUN
            - GWDXB
            - GWFEL
            - GWGRA
            - GWGYO
            - GWHCM
            - GWHKG
            - GWHall
            - GWJEN
            - GWLAU
            - GWLIN
            - GWMEM
            - GWMLD
            - GWMSA
            - GWNUR
            - GWOST
            - GWPAS
            - GWPOC
            - GWSEN
            - GWSGP
            - GWSZX
            - GWIBI
            - GWTEC
            - GWTUT
            - GWTYO
            - GWWOL
            - GWWOR
            - GWZAG
          example: GWLAU
    LogisticsAddress:
      type: object
      description: >-
        specific object to contain an address for a given purpose within a
        transport order
      required:
        - addressType
      properties:
        addressType:
          enum:
            - ORDERBY
            - SUPPLIER
            - CONSIGNEE
            - CONTRACTEE
            - LSP
            - DELIVERY_ADDRESS
            - DEPOSITOR
            - GOODS_OWNER
            - BUYER
            - DISTRIBUTOR
          type: string
          description: qualifier for the purpose of the address
          example: supplier
        addressReferences:
          items:
            $ref: '#/components/schemas/AddressReference'
          uniqueItems: true
          type: array
          description: references for this address
        address:
          description: address for this purpose
          $ref: '#/components/schemas/Address'
        contact:
          description: contact for this address
          $ref: '#/components/schemas/Contact'
    Note:
      description: object for text notes
      type: object
      properties:
        noteType:
          description: classification of the note
          type: string
          enum:
            - GENERAL
            - DELIVERY_INSTRUCTION
            - PICKUP_INSTRUCTION
            - TRANSPORT_INSTRUCTION
          example: GENERAL
        noteText:
          description: text of the note as LingualText object
          $ref: '#/components/schemas/LingualText'
    OrderLineReference:
      type: object
      description: reference for article
      properties:
        qualifier:
          enum:
            - BATCH
            - CROSSDOCKING_ID
            - RESERVATION_NUMBER
            - CUSTOMIZED_ATTRIBUTE1
            - VIRTUALITEM
            - SERIALNUMBER
            - CUSTOMER_ORDER
            - PURCHASE_ORDER_NUMBER
            - PURCHASER_ARTICLE_ID
            - SUPPLIER_ARTICLE_ID
          type: string
          description: qualifier for the reference
          example: CUSTOMER_ORDER
        reference:
          type: string
          example: abc123123
    OrderLineNote:
      type: object
      description: object for text notes
      properties:
        noteText:
          $ref: '#/components/schemas/LingualText'
        noteType:
          enum:
            - DELIVERYNOTE
            - WAREHOUSE_INSTRUCTION
            - HOMEDELIVERY
          type: string
          description: classification of the note
          example: DELIVERYNOTE
    OrderLine:
      type: object
      description: an identified but not specified packing item on a transport
      properties:
        articleId:
          type: string
          description: article identification number
          example: 3
        lineItemNumber:
          type: integer
          maximum: 99999
          description: unique customer line item number
          example: 5
        references:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/OrderLineReference'
        quantity:
          type: number
          description: quantity of article
          example: 2
        variant:
          type: string
          description: article variant
          example: test1
        notes:
          items:
            $ref: '#/components/schemas/OrderLineNote'
          type: array
    Currency:
      description: 'currency following ISO-42-17, see https://en.wikipedia.org/wiki/ISO_4217'
      type: string
      format: iso-4217
      example: EUR
    Value:
      type: object
      properties:
        qualifier:
          type: string
          description: type of amount
          enum:
            - GOODS_VALUE
            - INSURANCE_VALUE
            - CASH_ON_DELIVERY
        amount:
          type: number
          description: Amount expressed as a decimal number of major currency units
          format: decimal
          example: 99.95
        currency:
          $ref: '#/components/schemas/Currency'
    TransportProduct:
      description: specification of the required GW transport product
      type: object
      properties:
        product:
          description: definition of the GW transport product
          type: string
          enum:
            - GW_PRO_LINE
            - GW_DIRECT_LINE
            - AIRFREIGHT
            - FCL_SEAFREIGHT
            - LCL_SEAFREIGHT
            - GW_HOME_DELIVERY
            - DPD
            - EURO_EXPRESS
          example: GW_PRO_LINE
        productServiceLevel:
          description: >-
            definition of the GW service level of the product. Available service
            levels depend on the transport product plus the relation of the
            transport plus your contract with GW.
          type: string
          enum:
            - STD
            - EXP
            - P9
            - P10
            - P12
            - P16
            - D9
            - D10
            - D12
            - D16
          example: STD
        productServiceLevelText:
          description: service level of product expressed in text. Read-only!
          $ref: '#/components/schemas/Translation'
        additionalServices:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServiceTransport'
          uniqueItems: true
    GoodsItemReference:
      description: reference for goods item
      type: object
      properties:
        qualifier:
          type: string
          description: qualifier for the reference
          enum:
            - CUSTOMER_ORDER
            - GENERAL
            - PARCEL_ID
            - POSITION_NUMBER
            - CONSIGNEE_SHIPMENT_NUMBER
            - QUALITY_VALUATION_NUMBER
            - DELIVERY_NOTE
            - HANDLING_AND_MOVEMENT_REFERENCE(MRN)
            - PURCHASE_ORDER_NUMBER
            - RESERVATION_NUMBER
            - WAREHOUSE_RECEIPT_ID
            - CALL_OFF_ID
          example: general
        reference:
          description: reference string
          type: string
          maxLength: 20
          example: '12345'
    LogisticsRequirements:
      type: object
      description: information about the required transport
      properties:
        incoterm:
          $ref: '#/components/schemas/Incoterm'
        notes:
          items:
            $ref: '#/components/schemas/Note'
          type: array
        transportProduct:
          $ref: '#/components/schemas/TransportProduct'
        logisticsProduct:
          $ref: '#/components/schemas/LogisticsProduct'
        despatchDateTimeMin:
          $ref: '#/components/schemas/DateTime'
        despatchDateTimeMax:
          $ref: '#/components/schemas/DateTime'
        completionDateTimeMin:
          $ref: '#/components/schemas/DateTime'
        completionDateTimeMax:
          $ref: '#/components/schemas/DateTime'
    AdditionalServiceLogistics:
      type: object
      description: >-
        contains information of an additional service. The availability of an
        additional service depends on the GW product, in combination with the
        relation and your contract with GW.
      properties:
        additionalServiceText:
          description: additional service expressed in text. Read-only!
          allOf:
            - $ref: '#/components/schemas/Translation'
        additionalServiceAttribute:
          type: string
          description: some additional service require additional information
          example: Phone number 012345
        additionalService:
          enum:
            - DUMMY
          type: string
          description: additional service coded
          example: DUMMY
    AdditionalServiceTransport:
      description: >-
        contains information of an additional service. The availability of an
        additional service depends on the GW product, in combination with the
        relation and your contract with GW.
      type: object
      properties:
        additionalService:
          description: additional service coded
          type: string
          enum:
            - ARRIVAL
            - AVISO
            - DGM
            - COD
            - CUSTOMS
          example: COD
        additionalServiceText:
          description: additional service expressed in text. Read-only!
          $ref: '#/components/schemas/Translation'
        additionalServiceAttribute:
          description: some additional service require additional information
          type: string
          example: Phone number 012345
    LogisticsProduct:
      type: object
      description: specification of the required GW logistics product
      properties:
        product:
          enum:
            - INBOUND
            - OUTBOUND
          type: string
          description: definition of the GW logistics product
          example: GW
        productServiceLevel:
          enum:
            - STANDARD
          type: string
          description: >-
            definition of the GW service level of the product. Available service
            levels depend on the logistics product plus your contract with GW.
          example: STANDARD
        cargoType:
          type: string
          description: >-
            can be defined per customer; for special transport-routing; or
            special pricing-calculation (sortage-criteria)
          example: cargotype
        productServiceLevelText:
          $ref: '#/components/schemas/Translation'
        additionalServices:
          items:
            $ref: '#/components/schemas/AdditionalServiceLogistics'
          type: array
          uniqueItems: true
    LogisticsOrder:
      type: object
      additionalProperties: false
      description: object for a logistics order
      required:
        - creationDateTime
        - references
        - logisticsAddresses
        - orderLines
      properties:
        orderId:
          $ref: '#/components/schemas/GWOrderId'
        customerId:
          $ref: '#/components/schemas/GWCustomerId'
        creationDateTime:
          $ref: '#/components/schemas/DateTime'
        warehouseId:
          $ref: '#/components/schemas/GWWarehouseId'
        references:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
          uniqueItems: true
          description: array of references for this order
        logisticsAddresses:
          items:
            $ref: '#/components/schemas/LogisticsAddress'
          type: array
          uniqueItems: true
          minItems: 1
          description: involved addresses for this logistics order
        logisticsRequirements:
          description: >-
            object containing all requirments for the logistic planning and
            execution
          $ref: '#/components/schemas/LogisticsRequirements'
        orderLines:
          items:
            $ref: '#/components/schemas/OrderLine'
          type: array
          minItems: 1
          uniqueItems: true
          maxItems: 999
          description: identified items to be handled
        measurements:
          items:
            $ref: '#/components/schemas/Measurement'
          uniqueItems: true
          type: array
        dimension:
          description: dimension of the order
          $ref: '#/components/schemas/Dimension'
        values:
          items:
            $ref: '#/components/schemas/Value'
          uniqueItems: true
          type: array
        goodsItem:
          description: packed goods item to be transported
          type: array
          uniqueItems: true
          maxItems: 999
          items:
            $ref: '#/components/schemas/GoodsItem'
security:
  - oAuthGW:
      - API_LOGISTICS_ORDER_CREATE
      - API_LOGISTICS_ORDER_READ
x-wso2-security:
  apim:
    x-wso2-scopes:
      - key: API_LOGISTICS_ORDER_CREATE
        name: API_LOGISTICS_ORDER_CREATE
        roles: >-
          I_CUSAPI_LOGISTICS_ORDER_CREATE,EXTERNAL/I_CUSAPI_LOGISTICS_ORDER_CREATE,APPUSER/I_CUSAPI_LOGISTICS_ORDER_CREATE
        description: This scope provides the right to creaate logistics orders
      - key: API_LOGISTICS_ORDER_READ
        name: API_LOGISTICS_ORDER_READ
        roles: >-
          I_CUSAPI_LOGISTICS_ORDER_READ,EXTERNAL/I_CUSAPI_LOGISTICS_ORDER_READ,APPUSER/I_CUSAPI_LOGISTICS_ORDER_READ
        description: 'This scope provides access to logistics order for customer    '
